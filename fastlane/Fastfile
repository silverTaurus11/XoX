require 'dotenv'
require 'json'
require 'net/http'
require 'uri'

default_platform(:android)

platform :android do
  desc "Build and upload Debug APK to Firebase App Distribution"
  lane :build_debug do |options|
    encryption_key = options[:key]
    UI.user_error!("Missing encryption key. Use: fastlane android build_debug key:your_secret") unless encryption_key

    decrypted_env_path = ".env.tmp"
    encrypted_env_path = ".env.enc"

    # Dekripsi file .env.enc
    system("openssl aes-256-cbc -pbkdf2 -d -in #{encrypted_env_path} -out #{decrypted_env_path} -pass pass:#{encryption_key}")
    UI.user_error!("Failed to decrypt #{encrypted_env_path}") unless $?.success?

    begin
      Dotenv.load(decrypted_env_path)

      gradle(task: "assembleDebug")

      firebase_app_distribution(
        app: ENV['FIREBASE_APP_ID'],
        groups: "gayuh-internal",
        debug: true,
        firebase_cli_token: ENV['FIREBASE_CI_TOKEN'],
        release_notes: "Automated Debug Build via GitHub Actions",
        apk_path: "app/build/outputs/apk/debug/app-debug.apk"
      )

      send_telegram_message("‚úÖ build_debug", nil)
    rescue => e
      send_telegram_message("‚ùå build_debug", e)
      raise e
    ensure
      File.delete(decrypted_env_path) if File.exist?(decrypted_env_path)
    end
  end
end


def send_telegram_message(lane, exception)
  version = Time.now.strftime("%Y.%m.%d.%H%M")
  branch = `git rev-parse --abbrev-ref HEAD`.strip
  changelog = `git log -5 --pretty=format:'- [%h] %s (%an)'`

  status = exception.nil? ? "‚úÖ *SUCCESS*" : "‚ùå *FAILED*"
  timestamp = Time.now.strftime("%d %B %Y %H:%M:%S")

  message = <<~MSG
    #{status} _#{lane}_

    üîÄ *Branch:* `#{branch}`
    üì¶ *Version:* #{version}
    ‚è± *Time:* #{timestamp}
    üå± *Changelog:*
    #{changelog}
  MSG

  if exception
    message += "\n\nüö® *Error:*\n```#{exception.message}```"
  end

  uri = URI("https://api.telegram.org/bot#{ENV['TELEGRAM_TOKEN']}/sendMessage")

  Net::HTTP.post_form(uri, {
    "chat_id" => ENV['TELEGRAM_CHAT_ID'],
    "text" => message,
    "parse_mode" => "Markdown"
  })
end

